[{"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/index.js":"1","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/App.js":"2","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Header/Header.js":"3","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/CardList/CardList.js":"4","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Card/Card.js":"5","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/listennotes-array.js":"6","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/context/PodcastContext.js":"7","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/utils/category-list.js":"8","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/arrow/Arrow.js":"9","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/utils/dbCategoryList.js":"10"},{"size":282,"mtime":1616352202000,"results":"11","hashOfConfig":"12"},{"size":3817,"mtime":1627234692000,"results":"13","hashOfConfig":"12"},{"size":7724,"mtime":1627235102000,"results":"14","hashOfConfig":"12"},{"size":1952,"mtime":1627234813000,"results":"15","hashOfConfig":"12"},{"size":2067,"mtime":1627236247000,"results":"16","hashOfConfig":"12"},{"size":31988,"mtime":1616204629000,"results":"17","hashOfConfig":"12"},{"size":336,"mtime":1626749875000,"results":"18","hashOfConfig":"12"},{"size":8426,"mtime":1616267921000,"results":"19","hashOfConfig":"12"},{"size":1220,"mtime":1626750376000,"results":"20","hashOfConfig":"12"},{"size":902,"mtime":1627234373000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"t7kcnj",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/index.js",[],["47","48"],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/App.js",["49","50"],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Header/Header.js",["51","52","53","54"],"import React, { useState, useContext, useEffect } from 'react';\nimport CardList from '../CardList/CardList';\nimport { array1, array2, categoriesArray } from '../../utils/category-list';\nimport { PodcastContext } from '../../context/PodcastContext';\nimport './Header.css';\nimport axios from 'axios';\n\nconst Header = (props) => {\n\tconsole.log(props, 'props in Header.js');\n\tconst [ state, setState ] = useContext(PodcastContext);\n\tconst [ value, setValue ] = useState('');\n\tconst [ category, setCategory ] = useState('');\n\tconst [ rating, setRating ] = useState('');\n\tconst [ numberRatings, setNumberRatings ] = useState('');\n\tconst [ topPodcasts, setTopPodcasts ] = useState(null);\n\tconst [ genre, setGenre ] = useState('AI & Data Science');\n\tconst [ loader, setLoader ] = useState(true);\n\tconst [ dbCategories, setDbCategories ] = useState([]);\n\n\t// axios.post('http://localhost:7000/todos', {\n\t// \ttodo: 'Buy the milk'\n\t// });\n\n\tuseEffect(() => {\n\t\tcategoriesArray.unshift({ id: 0, name: '', parent_id: 0 });\n\t\tsetTimeout(() => setLoader(false), 6000);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst getDbCategories = async (e) => {\n\t\t\t// e.preventDefault();\n\t\t\tawait axios\n\t\t\t\t.get(`http://localhost:7000/getDbCategories`)\n\t\t\t\t.then(function(response) {\n\t\t\t\t\tsetDbCategories(response.data);\n\t\t\t\t})\n\t\t\t\t.catch(function(error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t};\n\t\tgetDbCategories();\n\t}, []);\n\n\tconst handleChange = (e) => {\n\t\tsetLoader(true);\n\t\tsetState({ page: 1, category: e.target.value });\n\t\tlet findValue = Number(e.target.value);\n\t\tlet findCategory = categoriesArray.find((item) => item.id === findValue).name;\n\t\tsetCategory(findCategory);\n\t\tprops.getApiData(e.target.value, 1);\n\t\tsetTopPodcasts('');\n\t\tsetLoader(false);\n\t};\n\n\tconst handleRatingInput = (e) => {\n\t\te.preventDefault();\n\t\tsetRating(e.target.value);\n\t\t// setNumberRatings({ [e.target.name]: value });\n\t\t// console.log(value, 'rating in Header');\n\t\t// props.getTopPodcasts(value, 100);\n\t};\n\tconst handleNumberRatingsInput = (e) => {\n\t\te.preventDefault();\n\t\tsetNumberRatings(e.target.value);\n\t\t// setNumberRatings({ [e.target.name]: value });\n\t\t// console.log(value, 'rating in Header');\n\t\t// props.getTopPodcasts(value, 100);\n\t};\n\n\tconst handleGenreInput = (e) => {\n\t\te.preventDefault();\n\t\tconsole.log(e.target.value, 'VALUE IN SELECT BOX IN GENRE 71**');\n\t\tsetGenre(e.target.value);\n\t\t// setNumberRatings({ [e.target.name]: value });\n\t\t// console.log(value, 'rating in Header');\n\t\t// props.getTopPodcasts(value, 100);\n\t};\n\n\tconst handleClick = async (e) => {\n\t\tconsole.log(rating, 'rating on click');\n\t\tconsole.log(genre, 'genre on click');\n\t\tconsole.log(numberRatings, 'numberRatings on click');\n\t\tlet stringGenre = encodeURIComponent(genre);\n\t\tconsole.log(stringGenre, 'stringGenre');\n\t\te.preventDefault();\n\t\tawait axios\n\t\t\t.post(\n\t\t\t\t`http://localhost:7000/getTopPodcasts/?rating=${rating}&numberRatings=${numberRatings}&genre=${genre}`,\n\t\t\t\t{\n\t\t\t\t\tbody: {\n\t\t\t\t\t\ttodo: { rating }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t\t.then(function(response) {\n\t\t\t\t// console.log(response.data, 'response.data 29 in Header');\n\t\t\t\tsetTopPodcasts(response.data);\n\t\t\t\tsetRating('');\n\t\t\t\tsetNumberRatings('');\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t// const value = e.target.value;\n\t\t// setRating(value);\n\n\t\t// setNumberRatings({ [e.target.name]: value });\n\t\t// console.log(rating, 'rating in Header');\n\t\t// console.log(rating, 'rating in Header');\n\t\t// props.getTopPodcasts(value, 100);\n\t};\n\t// const getDbCategories = async (e) => {\n\t// \t// e.preventDefault();\n\t// \tawait axios\n\t// \t\t.get(`http://localhost:7000/getDbCategories`)\n\t// \t\t.then(function(response) {\n\t// \t\t\tconsole.log(response.data, 'response.data 97 in Header');\n\t// \t\t\tsetDbCategories(response.data);\n\t// \t\t})\n\t// \t\t.catch(function(error) {\n\t// \t\t\tconsole.log(error);\n\t// \t\t});\n\t// \t// const value = e.target.value;\n\t// \t// setRating(value);\n\n\t// \t// setNumberRatings({ [e.target.name]: value });\n\t// \t// console.log(rating, 'rating in Header');\n\t// \t// console.log(rating, 'rating in Header');\n\t// \t// props.getTopPodcasts(value, 100);\n\t// };\n\t// getDbCategories();\n\n\tconst test = (e) => {\n\t\te.preventDefault();\n\t\tprops.getRecommend('11d262e4a57d46c2bc939449a43961c4');\n\t};\n\n\t// const getRecommend = (e) => {\n\t// \t// e.preventDefault();\n\t// \tprops.getRecommend('11d262e4a57d46c2bc939449a43961c4');\n\t// \t// await axios\n\t// \t// \t.get(`http://localhost:7000/getRecommend/?id=${id}`)\n\t// \t// \t.then(function(response) {\n\t// \t// \t\tconsole.log(response.data, 'response.data 97 in Header');\n\t// \t// \t\tsetDbCategories(response.data);\n\t// \t// \t})\n\t// \t// \t.catch(function(error) {\n\t// \t// \t\tconsole.log(error);\n\t// \t// \t});\n\t// \t// const value = e.target.value;\n\t// \t// setRating(value);\n\n\t// \t// setNumberRatings({ [e.target.name]: value });\n\t// \t// console.log(rating, 'rating in Header');\n\t// \t// console.log(rating, 'rating in Header');\n\t// \t// props.getTopPodcasts(value, 100);\n\t// };\n\n\t// console.log(rating, 'rating');\n\t// console.log(numberRatings, 'numberRatings');\n\t// console.log(genre, 'genre');\n\t// console.log(dbCategories, 'DB CATEGORIES BEFORE RETURN 115');\n\tconsole.log(category, 'CATEGORY');\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"top-section\">\n\t\t\t\t<h1 className=\"title\">TOP PODCASTS - {category.toUpperCase() || 'most popular'.toUpperCase()}</h1>\n\t\t\t\t<div className=\"selection-boxes\">\n\t\t\t\t\t<div className=\"selection-box\">\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<span>Choose a Genre (A - M) </span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<select id=\"selection\" name=\"scripts\" onChange={handleChange}>\n\t\t\t\t\t\t\t\t{array1.map((item) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<option key={item.id} value={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"selection-box\">\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<span className=\"dropdown-title\">Choose a Genre (M - Z) </span>\n\t\t\t\t\t\t\t\t<select id=\"selection2\" name=\"scripts\" onChange={handleChange}>\n\t\t\t\t\t\t\t\t\t{array2.map((item) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<option className=\"option\" key={item.id} value={item.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<form>\n\t\t\t\t{/* <fieldset> */}\n\t\t\t\t<div className=\"refine-header\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<p>Enter Min Rating</p>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"refine-input\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"rating\"\n\t\t\t\t\t\t\tvalue={rating}\n\t\t\t\t\t\t\tonChange={handleRatingInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<p>Enter # of Ratings</p>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"refine-input\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"numberRatings\"\n\t\t\t\t\t\t\tvalue={numberRatings}\n\t\t\t\t\t\t\tonChange={handleNumberRatingsInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<div className=\"selection-box\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<p>Genre</p>\n\t\t\t\t\t\t\t<select id=\"selection\" name=\"scripts\" onChange={handleGenreInput}>\n\t\t\t\t\t\t\t\t{categoriesArray.map((item) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<option key={item.id} value={item.name}>\n\t\t\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<button className=\"refine-button\" type=\"submit\" onClick={handleClick}>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"refine-button\" type=\"submit\" onClick={test}>\n\t\t\t\t\t\t\tTest\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* </fieldset> */}\n\t\t\t</form>\n\t\t\t{/* <input type=\"text\">Enter Min Rating</input>\n\t\t\t<input type=\"text\">Enter # of Ratings</input> */}\n\t\t\t<CardList\n\t\t\t\ttopPodcasts={topPodcasts}\n\t\t\t\tpodcasts={props}\n\t\t\t\tcategory={parseInt(value)}\n\t\t\t\tgetData={props.getApiData}\n\t\t\t\tisLoading={props.isLoading}\n\t\t\t\tgetRecommend={props.getRecommend}\n\t\t\t\trecommendations={props.recommendations}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default Header;\n","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/CardList/CardList.js",["55","56","57"],"import React, { useState, useEffect, useContext } from 'react';\nimport './CardList.css';\nimport Card from '../Card/Card';\nimport Arrow from '../arrow/Arrow';\nimport { PodcastContext } from '../../context/PodcastContext';\n\nconst CardList = ({ podcasts, topPodcasts, getData, isLoading, getRecommend, recommendations }) => {\n\t// const [ isLoading, setIsLoading ] = useState(true);\n\tconst [ displayTopPodcasts, setDisplayTopPodcasts ] = useState(false);\n\tconst [ state, setState ] = useContext(PodcastContext);\n\tconsole.log(topPodcasts, 'topPodcasts in CardList');\n\tconsole.log(podcasts, 'PODCAST PROPS IN CARDLIST12******');\n\tconsole.log(recommendations, 'recommendations in CardList');\n\n\t// useEffect(() => {\n\t// \tsetTimeout(() => setIsLoading(false), 6000);\n\t// }, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (topPodcasts) {\n\t\t\t\tsetDisplayTopPodcasts(true);\n\t\t\t\tconsole.log('There are Top Podcasts to Display!!!!');\n\t\t\t}\n\t\t},\n\t\t[ topPodcasts ]\n\t);\n\tuseEffect(\n\t\t() => {\n\t\t\tif (recommendations) {\n\t\t\t\ttopPodcasts = recommendations;\n\t\t\t\tconsole.log('topPodcasts swapped with recommendations');\n\t\t\t}\n\t\t},\n\t\t[ recommendations ]\n\t);\n\n\treturn (\n\t\t<div className=\"outer-container\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"podcast-display\">\n\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t<div id=\"preloader\">\n\t\t\t\t\t\t\t<div id=\"loader\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : topPodcasts ? (\n\t\t\t\t\t\ttopPodcasts.map((pod) => <Card key={pod.id} podcast={pod} getRecommend={getRecommend} />)\n\t\t\t\t\t) : podcasts.podcasts[0] ? (\n\t\t\t\t\t\tpodcasts.podcasts[0].map((pod) => (\n\t\t\t\t\t\t\t<Card key={pod.id} podcast={pod} getRecommend={getRecommend} />\n\t\t\t\t\t\t))\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div id=\"preloader\">\n\t\t\t\t\t\t\t<div id=\"loader\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{/* {recommendations && recommendations.map((pod) => <Card key={pod.id} podcast={pod} />)} */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{podcasts.podcasts[0] && !state.isLoading ? <Arrow getData={getData} showArrow={isLoading} /> : null}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Card/Card.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/listennotes-array.js",[],["58","59"],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/context/PodcastContext.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/utils/category-list.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/arrow/Arrow.js",["60","61"],"import React, { useContext } from 'react';\nimport './Arrow.css';\nimport { PodcastContext } from '../../context/PodcastContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretSquareLeft, faCaretSquareRight } from '@fortawesome/fontawesome-free-solid';\n\nconst Arrow = ({ getData, isLoading }) => {\n\tconst [ state, setState ] = useContext(PodcastContext);\n\tconst page = state.page;\n\n\tconst addPage = async () => {\n\t\tsetState({ ...state, page: state.page + 1 });\n\t\tawait getData(state.category, state.page + 1);\n\t\tsetTimeout(function() {\n\t\t\twindow.scrollTo({ top: 0, behavior: 'smooth' });\n\t\t}, 600);\n\t};\n\n\tconst subPage = async () => {\n\t\tsetState({ ...state, page: state.page - 1 });\n\t\tawait getData(state.category, state.page - 1);\n\t\tsetTimeout(function() {\n\t\t\twindow.scrollTo({ top: 0, behavior: 'smooth' });\n\t\t}, 1000);\n\t};\n\n\treturn (\n\t\t<div className=\"page\">\n\t\t\t{isLoading ? null : (\n\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\ticon=\"caret-square-left\"\n\t\t\t\t\tclassName={`arrow-left ${page > 1 ? 'visible' : null}`}\n\t\t\t\t\tonClick={subPage}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{isLoading ? null : <FontAwesomeIcon icon=\"caret-square-right\" className=\"arrow-right\" onClick={addPage} />}\n\t\t</div>\n\t);\n};\n\nexport default Arrow;\n","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/utils/dbCategoryList.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":10,"column":10,"nodeType":"68","messageId":"69","endLine":10,"endColumn":15},{"ruleId":"70","severity":1,"message":"71","line":15,"column":5,"nodeType":"72","endLine":15,"endColumn":7,"suggestions":"73"},{"ruleId":"66","severity":1,"message":"67","line":10,"column":10,"nodeType":"68","messageId":"69","endLine":10,"endColumn":15},{"ruleId":"66","severity":1,"message":"74","line":11,"column":17,"nodeType":"68","messageId":"69","endLine":11,"endColumn":25},{"ruleId":"66","severity":1,"message":"75","line":17,"column":10,"nodeType":"68","messageId":"69","endLine":17,"endColumn":16},{"ruleId":"66","severity":1,"message":"76","line":18,"column":10,"nodeType":"68","messageId":"69","endLine":18,"endColumn":22},{"ruleId":"66","severity":1,"message":"77","line":9,"column":10,"nodeType":"68","messageId":"69","endLine":9,"endColumn":28},{"ruleId":"66","severity":1,"message":"78","line":10,"column":17,"nodeType":"68","messageId":"69","endLine":10,"endColumn":25},{"ruleId":"70","severity":1,"message":"79","line":31,"column":19,"nodeType":"68","endLine":31,"endColumn":34},{"ruleId":"62","replacedBy":"80"},{"ruleId":"64","replacedBy":"81"},{"ruleId":"66","severity":1,"message":"82","line":5,"column":10,"nodeType":"68","messageId":"69","endLine":5,"endColumn":27},{"ruleId":"66","severity":1,"message":"83","line":5,"column":29,"nodeType":"68","messageId":"69","endLine":5,"endColumn":47},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setState'. Either include it or remove the dependency array.","ArrayExpression",["86"],"'setValue' is assigned a value but never used.","'loader' is assigned a value but never used.","'dbCategories' is assigned a value but never used.","'displayTopPodcasts' is assigned a value but never used.","'setState' is assigned a value but never used.","Assignments to the 'topPodcasts' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",["84"],["85"],"'faCaretSquareLeft' is defined but never used.","'faCaretSquareRight' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [setState]",{"range":"89","text":"90"},[487,489],"[setState]"]