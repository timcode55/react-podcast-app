[{"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/index.js":"1","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/App.js":"2","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Header/Header.js":"3","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/CardList/CardList.js":"4","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Card/Card.js":"5","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/listennotes-array.js":"6","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/context/PodcastContext.js":"7","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/utils/category-list.js":"8","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/arrow/Arrow.js":"9"},{"size":282,"mtime":1634935808000,"results":"10","hashOfConfig":"11"},{"size":2517,"mtime":1639610971000,"results":"12","hashOfConfig":"11"},{"size":2489,"mtime":1639611096000,"results":"13","hashOfConfig":"11"},{"size":745,"mtime":1639611108000,"results":"14","hashOfConfig":"11"},{"size":1590,"mtime":1639609318000,"results":"15","hashOfConfig":"11"},{"size":31988,"mtime":1616204629000,"results":"16","hashOfConfig":"11"},{"size":336,"mtime":1631211735000,"results":"17","hashOfConfig":"11"},{"size":8426,"mtime":1616267921000,"results":"18","hashOfConfig":"11"},{"size":1157,"mtime":1639609318000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t7kcnj",{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"25"},"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/index.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/App.js",["43","44"],"import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport { PodcastContext } from \"./context/PodcastContext\";\n\nlet cacheObject = {},\n  cacheArray = [];\n\nfunction App() {\n  const [podcasts, setPodcasts] = useState([]);\n  const [genre, setGenre] = useState(\"\");\n  const [state, setState] = useContext(PodcastContext);\n  const [status, setStatus] = useState(\"\");\n\n  useEffect(() => {\n    if (!genre) {\n      getApiData(67);\n      setState({ page: 1, category: 67 });\n      cacheObject[\"67\"] = getApiData(67) || [];\n      cacheArray.push(cacheObject);\n      setGenre(\"67\");\n    } else {\n      getApiData();\n    }\n  }, []);\n\n  const renderCache = async (genreId) => {\n    console.log(\"rendercache called\");\n    const data = cacheArray[0][`${genreId}`];\n    await setPodcasts([data]);\n    localStorage.setItem(\"podcasts\", data[0][0]);\n  };\n\n  const getApiData = async (genreId, page) => {\n    console.log(\"getapidatacalled\");\n    setStatus(\"loading\");\n    await fetch(\n      `https://listen-api.listennotes.com/api/v2/best_podcasts?genre_id=${genreId}&page=${page}&region=us&safe_mode=0`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-ListenAPI-Key\": process.env.REACT_APP_LISTEN_NOTES_API_KEY\n        },\n        credentials: \"same-origin\"\n      }\n    ).then((response) => {\n      response.json().then((data) => {\n        const getRating = async () => {\n          for (let pod of data.podcasts) {\n            const id = pod.id;\n            await axios\n              .get(`http://localhost:7000/findId/?data=${id}`)\n              .then(function (response) {\n                pod[\"rating\"] = response.data.rating;\n                pod[\"numberOfRatings\"] = response.data.numberOfRatings || \"N/A\";\n                pod[\"itunes\"] = response.data.itunes;\n                // pod['description'] = response.data.description;\n              })\n              .catch(function (error) {\n                console.log(error);\n              });\n          }\n          cacheObject[genreId] = data.podcasts || [];\n          await setGenre(genreId);\n          await setPodcasts([data.podcasts]);\n\n          setStatus(\"loaded\");\n        };\n        getRating();\n      });\n    });\n  };\n  return (\n    <Header\n      podcasts={podcasts}\n      getApiData={getApiData}\n      renderCache={renderCache}\n      cache={cacheArray}\n      status={status}\n    />\n  );\n}\n\nexport default App;\n",["45","46"],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Header/Header.js",["47"],"import React, { useState, useContext } from \"react\";\nimport CardList from \"../CardList/CardList\";\nimport { array1, array2, categoriesArray } from \"../../utils/category-list\";\nimport { PodcastContext } from \"../../context/PodcastContext\";\nimport \"./Header.css\";\n\nconst Header = (props) => {\n  const [state, setState] = useContext(PodcastContext);\n  const [value, setValue] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    setState({ page: 1, category: e.target.value });\n    let findValue = Number(e.target.value);\n    let findCategory = categoriesArray.find(\n      (item) => item.id === findValue\n    ).name;\n    setCategory(findCategory);\n    if (props.cache[0][`${e.target.value}`]) {\n      props.renderCache(e.target.value);\n    } else {\n      props.getApiData(e.target.value, 1);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"top-section\">\n        <h1 className=\"title\">\n          TOP PODCASTS -{\" \"}\n          {category.toUpperCase() || \"most popular\".toUpperCase()}\n        </h1>\n        <div className=\"selection-boxes\">\n          <div className=\"selection-box\">\n            <form>\n              <label>\n                <span>Choose a Genre (A - M) </span>\n              </label>\n              <select id=\"selection\" name=\"scripts\" onChange={handleChange}>\n                {array1.map((item) => {\n                  return (\n                    <option key={item.id} value={item.id}>\n                      {item.name}\n                    </option>\n                  );\n                })}\n              </select>\n            </form>\n          </div>\n          <div className=\"selection-box\">\n            <form>\n              <label>\n                <span className=\"dropdown-title\">Choose a Genre (M - Z) </span>\n                <select id=\"selection2\" name=\"scripts\" onChange={handleChange}>\n                  {array2.map((item) => {\n                    return (\n                      <option className=\"option\" key={item.id} value={item.id}>\n                        {item.name}\n                      </option>\n                    );\n                  })}\n                </select>\n              </label>\n            </form>\n          </div>\n        </div>\n      </div>\n      <CardList\n        podcasts={props}\n        category={parseInt(value)}\n        getData={props.getApiData}\n        status={props.status}\n        cache={props.cache}\n      />\n    </div>\n  );\n};\n\nexport default Header;\n","/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/CardList/CardList.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/Card/Card.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/listennotes-array.js",[],["48","49"],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/context/PodcastContext.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/utils/category-list.js",[],"/Volumes/Data/Tim's Coding Projects/podcharts-react/client/src/components/arrow/Arrow.js",["50","51"],"import React, { useContext } from 'react';\nimport './Arrow.css';\nimport { PodcastContext } from '../../context/PodcastContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretSquareLeft, faCaretSquareRight } from '@fortawesome/fontawesome-free-solid';\n\nconst Arrow = ({ getData, isLoading }) => {\n\tconst [ state, setState ] = useContext(PodcastContext);\n\tconst page = state.page;\n\n\tconst addPage = async () => {\n\t\tsetState({ ...state, page: state.page + 1 });\n\t\tawait getData(state.category, state.page + 1);\n\t\tsetTimeout(function() {\n\t\t\twindow.scrollTo({ top: 0, behavior: 'smooth' });\n\t\t}, 600);\n\t};\n\n\tconst subPage = async () => {\n\t\tsetState({ ...state, page: state.page - 1 });\n\t\tawait getData(state.category, state.page - 1);\n\t\tsetTimeout(function() {\n\t\t\twindow.scrollTo({ top: 0, behavior: 'smooth' });\n\t\t}, 1000);\n\t};\n\n\treturn (\n\t\t<div className=\"page\">\n\t\t\t{isLoading ? null : (\n\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\ticon=\"caret-square-left\"\n\t\t\t\t\tclassName={`arrow-left ${page > 1 ? 'visible' : null}`}\n\t\t\t\t\tonClick={subPage}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{isLoading ? null : <FontAwesomeIcon icon=\"caret-square-right\" className=\"arrow-right\" onClick={addPage} />}\n\t\t</div>\n\t);\n};\n\nexport default Arrow;\n",{"ruleId":"52","severity":1,"message":"53","line":13,"column":10,"nodeType":"54","messageId":"55","endLine":13,"endColumn":15},{"ruleId":"56","severity":1,"message":"57","line":26,"column":6,"nodeType":"58","endLine":26,"endColumn":8,"suggestions":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"52","severity":1,"message":"53","line":8,"column":10,"nodeType":"54","messageId":"55","endLine":8,"endColumn":15},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"52","severity":1,"message":"66","line":5,"column":10,"nodeType":"54","messageId":"55","endLine":5,"endColumn":27},{"ruleId":"52","severity":1,"message":"67","line":5,"column":29,"nodeType":"54","messageId":"55","endLine":5,"endColumn":47},"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'genre' and 'setState'. Either include them or remove the dependency array.","ArrayExpression",["68"],"no-native-reassign",["69"],"no-negated-in-lhs",["70"],["69"],["70"],"'faCaretSquareLeft' is defined but never used.","'faCaretSquareRight' is defined but never used.",{"desc":"71","fix":"72"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [genre, setState]",{"range":"73","text":"74"},[723,725],"[genre, setState]"]